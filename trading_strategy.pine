//@version=5
strategy("자동매매 전략 - Trend Following with S/R", 
         shorttitle="Auto Trading", 
         overlay=true, 
         initial_capital=10000, 
         default_qty_type=strategy.percent_of_equity, 
         default_qty_value=2, 
         commission_type=strategy.commission.percent, 
         commission_value=0.1)

// ============================================================================
// 입력 변수 설정 (Trading Plan 기반)
// ============================================================================

// 1. Trade Entries & Exits 설정
trend_period = input.int(20, "트렌드 판단 기간", minval=5, maxval=100, group="Trade Entries & Exits")
fast_ma = input.int(10, "빠른 이동평균", minval=5, maxval=50, group="Trade Entries & Exits")
slow_ma = input.int(20, "느린 이동평균", minval=10, maxval=100, group="Trade Entries & Exits")

// 2. Risk Control 설정
position_size = input.float(2.0, "포지션 크기 (%)", minval=0.5, maxval=10, step=0.5, group="Risk Control")
stop_loss_pct = input.float(2.0, "손절 비율 (%)", minval=0.5, maxval=10, step=0.5, group="Risk Control")
take_profit_pct = input.float(4.0, "익절 비율 (%)", minval=1.0, maxval=20, step=0.5, group="Risk Control")
max_daily_loss = input.float(5.0, "일일 최대 손실 (%)", minval=1.0, maxval=20, step=0.5, group="Risk Control")
max_positions = input.int(3, "최대 포지션 수", minval=1, maxval=10, group="Risk Control")

// 3. Market Focus 설정
use_session_filter = input.bool(true, "세션 필터 사용", group="Market Focus")
session_start = input.session("0900-1500", "거래 세션", group="Market Focus")

// 4. Market Conditions 설정
volatility_period = input.int(14, "변동성 기간", minval=5, maxval=50, group="Market Conditions")
volume_threshold = input.float(1.5, "볼륨 임계값", minval=1.0, maxval=3.0, step=0.1, group="Market Conditions")

// ============================================================================
// 기술적 지표 계산
// ============================================================================

// 이동평균
ma_fast = ta.sma(close, fast_ma)
ma_slow = ta.sma(close, slow_ma)

// 트렌드 판단
trend_up = ma_fast > ma_slow and close > ma_slow
trend_down = ma_fast < ma_slow and close < ma_slow
trend_sideways = not trend_up and not trend_down

// 지지/저항 레벨 계산
pivot_high = ta.pivothigh(high, 5, 5)
pivot_low = ta.pivotlow(low, 5, 5)

var float resistance_level = na
var float support_level = na

if not na(pivot_high)
    resistance_level := pivot_high
if not na(pivot_low)
    support_level := pivot_low

// 변동성 측정 (ATR)
atr = ta.atr(14)
volatility = atr / close * 100

// 볼륨 분석
avg_volume = ta.sma(volume, 20)
volume_spike = volume > avg_volume * volume_threshold

// RSI 오버바이/오버솔드
rsi = ta.rsi(close, 14)
oversold = rsi < 30
overbought = rsi > 70

// ============================================================================
// 세션 필터
// ============================================================================
in_session = not use_session_filter or time(timeframe.period, session_start)

// ============================================================================
// 트레이딩 플로우차트 로직 구현
// ============================================================================

// 트렌드 확인
is_bullish_trend = trend_up and close > ma_slow
is_bearish_trend = trend_down and close < ma_slow
is_sideways = trend_sideways

// 지지/저항 레벨 확인
at_support = not na(support_level) and math.abs(close - support_level) / close < 0.01
at_resistance = not na(resistance_level) and math.abs(close - resistance_level) / close < 0.01

// 매수 조건 (플로우차트 기반)
long_condition = is_bullish_trend and at_support and volume_spike and not overbought and in_session

// 매도 조건 (플로우차트 기반)
short_condition = is_bearish_trend and at_resistance and volume_spike and not oversold and in_session

// 대기 조건 (사이드웨이 또는 불확실한 상황)
wait_condition = is_sideways or (not at_support and not at_resistance)

// ============================================================================
// 리스크 관리
// ============================================================================

// 일일 손실 추적
var float daily_pnl = 0.0
if dayofweek != dayofweek[1]
    daily_pnl := 0.0

// 현재 포지션 수 계산
current_positions = strategy.opentrades

// 포지션 크기 계산 (Kelly Criterion 적용)
win_rate = strategy.wintrades / math.max(strategy.closedtrades, 1)
avg_win = strategy.grossprofit / math.max(strategy.wintrades, 1)
avg_loss = strategy.grossloss / math.max(strategy.losstrades, 1)

kelly_pct = win_rate - ((1 - win_rate) / (avg_win / math.max(avg_loss, 1)))
optimal_size = math.min(position_size, math.max(0.5, kelly_pct * 100))

// ============================================================================
// 진입 및 청산 로직
// ============================================================================

// 리스크 관리 조건 확인
risk_ok = current_positions < max_positions and math.abs(daily_pnl) < max_daily_loss

// 롱 포지션 진입
if long_condition and risk_ok and strategy.position_size == 0
    stop_price = close * (1 - stop_loss_pct / 100)
    target_price = close * (1 + take_profit_pct / 100)
    
    strategy.entry("Long", strategy.long, qty=optimal_size)
    strategy.exit("Long Exit", "Long", stop=stop_price, limit=target_price)
    
    // 진입 시 라벨 표시
    label.new(bar_index, low, "BUY\n" + str.tostring(close, "#.##"), 
              style=label.style_label_up, color=color.green, textcolor=color.white, size=size.small)

// 숏 포지션 진입
if short_condition and risk_ok and strategy.position_size == 0
    stop_price = close * (1 + stop_loss_pct / 100)
    target_price = close * (1 - take_profit_pct / 100)
    
    strategy.entry("Short", strategy.short, qty=optimal_size)
    strategy.exit("Short Exit", "Short", stop=stop_price, limit=target_price)
    
    // 진입 시 라벨 표시
    label.new(bar_index, high, "SELL\n" + str.tostring(close, "#.##"), 
              style=label.style_label_down, color=color.red, textcolor=color.white, size=size.small)

// 긴급 청산 조건
emergency_exit_long = strategy.position_size > 0 and (close < ma_fast * 0.95 or rsi > 80)
emergency_exit_short = strategy.position_size < 0 and (close > ma_fast * 1.05 or rsi < 20)

if emergency_exit_long
    strategy.close("Long", comment="Emergency Exit")
if emergency_exit_short
    strategy.close("Short", comment="Emergency Exit")

// ============================================================================
// 시각화
// ============================================================================

// 이동평균 플롯
plot(ma_fast, "Fast MA", color=color.blue, linewidth=1)
plot(ma_slow, "Slow MA", color=color.red, linewidth=2)

// 지지/저항 레벨 표시
plot(support_level, "Support", color=color.green, style=plot.style_line, linewidth=2)
plot(resistance_level, "Resistance", color=color.red, style=plot.style_line, linewidth=2)

// 트렌드 배경색
bgcolor(is_bullish_trend ? color.new(color.green, 95) : 
        is_bearish_trend ? color.new(color.red, 95) : 
        color.new(color.gray, 95), title="Trend Background")

// ============================================================================
// 성과 추적 테이블
// ============================================================================
if barstate.islast
    var table performance_table = table.new(position.top_right, 2, 8, bgcolor=color.white, border_width=1)
    
    table.cell(performance_table, 0, 0, "지표", text_color=color.black, bgcolor=color.gray)
    table.cell(performance_table, 1, 0, "값", text_color=color.black, bgcolor=color.gray)
    
    table.cell(performance_table, 0, 1, "총 거래", text_color=color.black)
    table.cell(performance_table, 1, 1, str.tostring(strategy.closedtrades), text_color=color.black)
    
    table.cell(performance_table, 0, 2, "승률", text_color=color.black)
    table.cell(performance_table, 1, 2, str.tostring(win_rate * 100, "#.##") + "%", text_color=color.black)
    
    table.cell(performance_table, 0, 3, "수익률", text_color=color.black)
    table.cell(performance_table, 1, 3, str.tostring(strategy.netprofit / strategy.initial_capital * 100, "#.##") + "%", 
               text_color=strategy.netprofit > 0 ? color.green : color.red)
    
    table.cell(performance_table, 0, 4, "최대 손실", text_color=color.black)
    table.cell(performance_table, 1, 4, str.tostring(strategy.max_drawdown, "#.##"), text_color=color.red)
    
    table.cell(performance_table, 0, 5, "현재 포지션", text_color=color.black)
    table.cell(performance_table, 1, 5, str.tostring(current_positions), text_color=color.black)
    
    table.cell(performance_table, 0, 6, "일일 손익", text_color=color.black)
    table.cell(performance_table, 1, 6, str.tostring(daily_pnl, "#.##") + "%", 
               text_color=daily_pnl > 0 ? color.green : color.red)
    
    table.cell(performance_table, 0, 7, "변동성", text_color=color.black)
    table.cell(performance_table, 1, 7, str.tostring(volatility, "#.##") + "%", text_color=color.black)

// ============================================================================
// 알림 조건
// ============================================================================
alertcondition(long_condition, title="매수 신호", message="매수 조건 충족: {{ticker}} at {{close}}")
alertcondition(short_condition, title="매도 신호", message="매도 조건 충족: {{ticker}} at {{close}}")
alertcondition(emergency_exit_long or emergency_exit_short, title="긴급 청산", message="긴급 청산 조건 충족: {{ticker}}")